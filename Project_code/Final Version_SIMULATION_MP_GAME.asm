.MODEL HUGE
.STACK 64
.DATA
;ARRAY_INSTRUCTIONS_NAME @ INTIAL CURSER POINT COLOMN= 0->79 & ROW=1
ARRAY_INSTRUCTIONS_NAME  db			 ' MOV  ADD  SUB  INC  DEC  ADC  SBB  SHL  SHR  ROL  ROR  RCL  RCR  AND  XOR  OR  '

;ARRAY_REGISTERS_NAME @ INTIAL CURSER POINT COLOMN= 0->79 & ROW=1
ARRAY_REGISTERS_NAME  db   			 ' AX   BX   CX   DX   SI   DI   SP   BP   AH   AL   BH   BL   CH   CL   DH   DL  '

;ARRAY_VALUES_NAME @ INTIAL CURSER POINT COLOMN= 0->79 & ROW=1
ARRAY_VALUES_NAME  db                '  0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F  '

;OPERAND1_ARRAY_ADDRESS_MODE_NAME @ INTIAL CURSER POINT COLOMN= 0->79 & ROW=1
OPERAND1_ARRAY_ADDRESS_MODE_NAME  db '             DIRECT             REGISTER INDIRECT             REGESTER          '

;OPERAND2_ARRAY_ADDRESS_MODE_NAME @ INTIAL CURSER POINT COLOMN= 0->79 & ROW=1
OPERAND2_ARRAY_ADDRESS_MODE_NAME  db '        DIRECT        REGISTER INDIRECT        REGESTER        IMMIDIATE        '

;LEVEL1_ARRAY_POWERS_UP_NAME @ INTIAL CURSER POINT COLOMN= 0->7 & ROW=3->27
LEVEL1_ARRAY_POWERS_UP_NAME  db		 ' CLEAR           SEND            CHAT            POWER_1         POWER_2         POWER_3         POWER_4                                                        PLAYER_1 HUNT:00        PLAYER_2 HUNT:00'

;LEVEL2_ARRAY_POWERS_UP_NAME @ INTIAL CURSER POINT COLOMN= 0->7 & ROW=3->27
LEVEL2_ARRAY_POWERS_UP_NAME  db		 ' CLEAR           SEND            CHAT            POWER_1         POWER_2         POWER_3         POWER_4         POWER_5        PLAYER_1        PLAYER_2        PLAYER_1 HUNT:00        PLAYER_2 HUNT:00'

PLAYER_DEFAULT_CHAT_MASSEGE  db		 '                :                                                               '

;PLAYER_1_CHAT_MASSEGE @ INTIAL CURSER POINT COLOMN= 0->79 & ROW=28
PLAYER_1_CHAT_MASSEGE  db			 '                :                                                               '

;PLAYER_2_CHAT_MASSEGE @ INTIAL CURSER POINT COLOMN= 0->79 & ROW=29
PLAYER_2_CHAT_MASSEGE  db			 '                :                                                               '

;MAIN_GAME_NAME_SCORE_GOAL @ INTIAL CURSER POINT COLOMN= 8->79 & ROW=3
MAIN_GAME_NAME_SCORE_GOAL  db		 '                  : 0 0 0   GOAL:" 1 0 5 E "                   : 0 0 0  '
;EXAMPLE_MAIN_GAME_NAME_SCORE_GOAL DB'  OMAR KHALED ALI : 0 0 0   GOAL:" 1 0 5 E "   OMAR KHALED ALI : 0 0 0  '

;PLAYER_1_MEMORY_VALUES @ INTIAL CURSER POINT COLOMN= 35->43 & ROW=5->20
PLAYER_1_MEMORY_VALUES db            ' 0 0 : 0  0 0 : 1  0 0 : 2  0 0 : 3  0 0 : 4  0 0 : 5  0 0 : 6  0 0 : 7  0 0 : 8  0 0 : 9  0 0 : A  0 0 : B  0 0 : C  0 0 : D  0 0 : E  0 0 : F '

;PLAYER_2_MEMORY_VALUES @ INTIAL CURSER POINT COLOMN= 71->79 & ROW=5->20
PLAYER_2_MEMORY_VALUES db            ' 0 0 : 0  0 0 : 1  0 0 : 2  0 0 : 3  0 0 : 4  0 0 : 5  0 0 : 6  0 0 : 7  0 0 : 8  0 0 : 9  0 0 : A  0 0 : B  0 0 : C  0 0 : D  0 0 : E  0 0 : F '
PLAYER_1_FORBIDDEN_CHARACTER db      'FORBIDDENCHARACTER   [ ]   '
;TESTT  db			                 '00000000001111111111222222222233333333334444444444555555555566666666667777777777'
;TESTT  db          				 '01234567890123456789012345678901234567890123456789012345678901234567890123456789'
;PLAYER_REGISTERS_AX_SI @ INTIAL CURSER POINT COLOMN= 8->34 + 44->70 & ROW=6
PLAYER_REGISTERS_AX_SI  db			 '    AX               SI    '

;PLAYER1_REGISTERS_AX_SI_VALUE @ INTIAL CURSER POINT COLOMN= 8->34 & ROW=8
PLAYER1_REGISTERS_AX_SI_VALUE  db	 '  0 0 0 0         0 0 0 0  '

;PLAYER2_REGISTERS_AX_SI_VALUE @ INTIAL CURSER POINT COLOMN= 44->70 & ROW=8
PLAYER2_REGISTERS_AX_SI_VALUE  db	 '  0 0 0 0         0 0 0 0  '

;PLAYER_REGISTERS_BX_DI @ INTIAL CURSER POINT COLOMN= 8->34 + 44->70 & ROW=11
PLAYER_REGISTERS_BX_DI  db			 '    BX               DI    '

;PLAYER1_REGISTERS_BX_DI_VALUE @ INTIAL CURSER POINT COLOMN= 8->34 & ROW=13
PLAYER1_REGISTERS_BX_DI_VALUE  db	 '  0 0 0 0         0 0 0 0  '

;PLAYER2_REGISTERS_BX_DI_VALUE @ INTIAL CURSER POINT COLOMN= 44->70 & ROW=13
PLAYER2_REGISTERS_BX_DI_VALUE  db	 '  0 0 0 0         0 0 0 0  '

;PLAYER_REGISTERS_CX_SP @ INTIAL CURSER POINT COLOMN= 8->34 + 44->70 & ROW=16
PLAYER_REGISTERS_CX_SP  db			 '    CX               SP    '

;PLAYER1_REGISTERS_CX_SP_VALUE @ INTIAL CURSER POINT COLOMN= 8->34 & ROW=18
PLAYER1_REGISTERS_CX_SP_VALUE  db	 '  0 0 0 0         0 0 0 0  '

;PLAYER2_REGISTERS_CX_SP_VALUE @ INTIAL CURSER POINT COLOMN= 44->70 & ROW=18
PLAYER2_REGISTERS_CX_SP_VALUE  db	 '  0 0 0 0         0 0 0 0  '

;PLAYER_REGISTERS_DX_BP @ INTIAL CURSER POINT COLOMN= 8->34 + 44->70 & ROW=21
PLAYER_REGISTERS_DX_BP  db			 '    DX               BP    '

;PLAYER1_REGISTERS_DX_BP_VALUE @ INTIAL CURSER POINT COLOMN= 8->34 & ROW=23
PLAYER1_REGISTERS_DX_BP_VALUE  db	 '  0 0 0 0         0 0 0 0  '

;PLAYER2_REGISTERS_DX_BP_VALUE @ INTIAL CURSER POINT COLOMN= 44->70 & ROW=23
PLAYER2_REGISTERS_DX_BP_VALUE  db	 '  0 0 0 0         0 0 0 0  '

;PLAYER_COMMAND_MASSEGE @ INTIAL CURSER POINT COLOMN= 8->34 & ROW=26
PLAYER_COMMAND_MASSEGE db            '                           '
;EXAMPLE PLAYER_COMMAND_MASSEGE      '      MOV [AX] , FFFFH     '
EMTY_COMMAND_MASSEGE db              '                           '

;MASSEGE @ INTIAL CURSER POINT COLOMN= 40->71 & ROW=26
MASSEGE   DB         '                               ' 
DEFUALT_MASSEGE DB   '                               '
MASSEGE_1 DB         ' PRESS A INSTRUCTION           '
MASSEGE_2 DB         ' CHOOSE A ADDRESS_MODE         '
MASSEGE_3 DB         ' PRESS A REGESTER              '
MASSEGE_4 DB         ' PRESS CLEAR OR SEND           '
MASSEGE_5 DB         ' CHOOSE PLAYER COMMAND EXCUTION'
MASSEGE_6 DB         ' ENTER THE NEW GOAL            '
MASSEGE_7 DB         ' ENTER NEW FORBIDDEN CHARACTER '
MASSEGE_8 DB         ' ENTER CHAT MASSEGE            '
MASSEGE_9 DB         ' WAIT PLAYER 2 WRITING COMMAND '



RECTANGLE_INTIAL_X DW 0
RECTANGLE_INTIAL_Y DW 0
RECTANGLE_COLOR DB 0
RECTANGLE_FINAL_X DW 0
RECTANGLE_FINAL_Y DW 0

INTIAL_COL_CURSER DB 0
INTIAL_ROW_CURSER DB 0
CHARACTER_COLOR DB 0
FINAL_COL_CURSER DB 0
FINAL_ROW_CURSER DB 0

COMMAND_LIST DB 0 ;number to choose list 
;COMMAND_FORMATION_STEPS DB 0 
GAME_LEVE DB 2 ;number to choose LEVEL 1 OR 2
COPY_SIZE DW 0

INSTRUCT DB 0;0-->F
ADDRESS_MODE1 DB 1;0-->2
ADDRESS_MODE2 DB 3;0-->2  3
OP1 DB 0;0-->F
OP2 DB 0;0-->F
IMM_OP2 DB '0000';   0000-->FFFF

GAME_GOAL DB '105E'
INTEGER_GAME_GOAL DW 105EH 
Memory_Update DB '00'
Memory_Location DB 0

PLAYER_1_NAME DB '               ';//15 CHARACTER MAXIMUM 
PLAYER_2_NAME DB '               ';//15 CHARACTER MAXIMUM 
PLAYER_1_SCORE DB '000' 
PLAYER_2_SCORE DB '000'
INTEGER_PLAYER_1_SCORE DB 0
PLAYER_1_MASSAGE DB '                                                              ';//62 CHARACTER MAXIMUM 
PLAYER_2_MASSAGE DB '                                                              ';//62 CHARACTER MAXIMUM                                                                                                                            

FORBIDDEN_CHARACTER DB '0' ;//ALPHABITICAL OR NUMBERS ONLY //PLAYER_2
SEND_FORBIDDEN_CHARACTER DB '0';//MY
VALIDATION DB 0
SUBPOINT DW 0
PLAYER1_EXE DB 0
PLAYER2_EXE DB 0

EXC_POWER3_DONE DB 0 ;CHECK USE THIS POWER ONLY ONE TIME IN THE GAME
EXC_POWER4_DONE DB 0
EXC_POWER5_DONE DB 0

I_WIN DB 0  ;0-->NO , 1-->I   CHECK_GOAL
YOU_WIN DB 0  ;0--NO , 1-->YOU  CHECK_SCORE

SEND_SIZE DB 0

VALUE DB '0'

.CODE
MAIN  PROC FAR 
;INTIALIZE
	MOV AX,@DATA
	MOV DS,AX
	MOV AX, 1;SHOW MOUSE
    INT 33H
;MAIN_GAME_LOOP:
    CALL DRAW_GAME_SCREEN
	;CALL GET_CHAT
	;CHECK WHOSE ROLE FIRST
START_MY_ROLE:
    CALL GET_MOUSE_RIGHT_CLICK_POSITION
	MOV AX,32 		; FIRST check that the click is in the HORIZONTAL LIST region
	CMP DX,AX
	JG CHECK_VERTICAL_LIST
    CALL CREATE_COMMAND
	JMP ROLE_EXCUTION
	CHECK_VERTICAL_LIST:
	MOV AX,128 ; [128 --> for 8 chars] check that the click is in the valid region
	CMP CX,AX
	JG START_MY_ROLE
	VERT_LIST_0:
    MOV AX,DX  
	MOV DX,0
	MOV BX,32			   
	DIV BX 
	SUB AX ,1 ; as we already took 32 pixels for the horizontal line
	CMP AX , 2     ; MEANS [SEND] OR [CLEAR] HAS BEEN CLICKED
	JL START_MY_ROLE 
	CMP AX , 3    ; IF COME HERE THEN ( AX > 1 )
	JL GO_EXCUTE_CHAT  ; MEANS ( AX == 2 ) --> [CHAT]
	CMP AX , 4    ; IF COME HERE THEN ( AX > 2 )
	JL GO_POWER_UP_1  ; MEANS ( AX == 3 ) --> [POWER_UP_1]
	CMP AX , 5    ; IF COME HERE THEN ( AX > 3 )
	JL GO_POWER_UP_2  ; MEANS ( AX == 4 ) --> [POWER_UP_2]
	CMP AX , 6    ; IF COME HERE THEN ( AX > 4 )
	JL GO_POWER_UP_3  ; MEANS ( AX == 5 ) --> [POWER_UP_3]
	CMP AX , 7    ; IF COME HERE THEN ( AX > 5 )
	JL GO_POWER_UP_4  ; MEANS ( AX == 6 ) --> [POWER_UP_4]
	MOV BH,GAME_LEVE
	CMP BH,1
	JE START_MY_ROLE
	CMP AX , 8    
	JL GO_POWER_UP_5 
	CMP AX , 9    
	JL GO_PLAYER1_EXE 
	CMP AX , 10    
	JL GO_PLAYER2_EXE
    JMP	START_MY_ROLE
GO_EXCUTE_CHAT:	
	CALL GET_CHAT
	JMP START_MY_ROLE
GO_POWER_UP_1:
	CALL EXCUTE_POWER_UP_1
    JMP START_MY_ROLE
GO_POWER_UP_2:
	CALL EXCUTE_POWER_UP_2
    JMP START_MY_ROLE
GO_POWER_UP_3:
	CALL EXCUTE_POWER_UP_3
    JMP START_MY_ROLE
GO_POWER_UP_4:
	CALL EXCUTE_POWER_UP_4
    JMP START_MY_ROLE
GO_POWER_UP_5:
	CALL EXCUTE_POWER_UP_5
    JMP START_MY_ROLE
GO_PLAYER1_EXE:
        MOV AL,1
		MOV PLAYER1_EXE, AL
		MOV AL,0
		MOV PLAYER2_EXE, AL
    JMP START_MY_ROLE	
GO_PLAYER2_EXE:
        MOV AL,0
		MOV PLAYER1_EXE, AL
		MOV AL,1
		MOV PLAYER2_EXE, AL
    JMP START_MY_ROLE			
	
	ROLE_EXCUTION:
	;CALL VALIDATION 
	MOV AH,0
	CMP VALIDATION,AH
	JE START_MY_ROLE
	
	CALL CHECK_SCORE ;I
	;CMP 
	;CALL EXCUTION
	;CHECK GAOL      IF YES JMP PLAYER1 WINNNER
	CALL SENDING 
START_PLAYER_2_ROLE:
	CALL RECIEVEING
	JMP START_MY_ROLE
	
	END_GAME:
	
HLT

MAIN ENDP

GET_MOUSE_RIGHT_CLICK_POSITION PROC NEAR
	MOV AX, 1;SHOW MOUSE
    INT 33H
        UNTIL_CLICK:
		MOV AX,3
		INT 33h   ;GET_MOUSE_RIGHT_CLICK_POSITION
		CMP BX,1   ;RIGHT CLICK
		JNE UNTIL_CLICK;CX:---->X(HORIZONTAL AXIS) (0-->1280) & DX---> y(VERTICAL AXIS)(0-->480)
        RET
		    ;CHANGE REGESTERS:"AX,BX,CX,DX"		  		  		  		  		  
	GET_MOUSE_RIGHT_CLICK_POSITION ENDP
	
CREATE_COMMAND PROC NEAR
    START_COMMMANDING:
	;
        ;-------------------------------------------------------
        MOV AX,CX  	; the position for INSTRUCT 0-->F 
		MOV DX,0
		MOV BX,80			   
		DIV BX  		 ;AX--> 0-->F
		MOV INSTRUCT, AL
		;MOV AL,1
		;MOV COMMAND_FORMATION_STEPS,AL
		;CALL UPDATE_PLAYER_COMMAND_MASSEGE_LINE
		MOV AL,1
		MOV COMMAND_LIST,AL
		CALL UPDATE_COMMAND_LIST
		;-------------------------------------------------------
		CALL GET_MOUSE_RIGHT_CLICK_POSITION;--------------------------------
        MOV AX,CX  	; the position for ADDRES_MODE1 0-->2 
		MOV DX,0
		MOV BX,426			   
		DIV BX  		 ;AX--> 0-->2
		MOV ADDRESS_MODE1, AL
		;MOV AL,2
		;MOV COMMAND_FORMATION_STEPS,AL
		;CALL UPDATE_PLAYER_COMMAND_MASSEGE_LINE
	    ;================================
            ;OPERAND1
          	MOV AH,ADDRESS_MODE1  	
			CMP AH,0
		    JE MODE1_VALUE_0
            JMP MODE1_REGESTER_0
		MODE1_VALUE_0: 
		    MOV AL,4
			MOV COMMAND_LIST,AL
			CALL UPDATE_COMMAND_LIST
            JMP END_MODE1_0
		MODE1_REGESTER_0:
		    MOV AL,3
			MOV COMMAND_LIST,AL
			CALL UPDATE_COMMAND_LIST
        END_MODE1_0:
		;-------------------------------------------------------
		CALL GET_MOUSE_RIGHT_CLICK_POSITION;--------------------------------
        MOV AX,CX  	; the position for OP1 0-->F 
		MOV DX,0
		MOV BX,80			   
		DIV BX  		 ;AX--> 0-->F
		MOV OP1, AL
		;MOV AL,3
		;MOV COMMAND_FORMATION_STEPS,AL
		;CALL UPDATE_PLAYER_COMMAND_MASSEGE_LINE		
		MOV AL,2
		MOV COMMAND_LIST,AL
		CALL UPDATE_COMMAND_LIST
		;-------------------------------------------------------
		CALL GET_MOUSE_RIGHT_CLICK_POSITION;--------------------------------
        MOV AX,CX  	; the position for ADDRES_MODE2 0-->3 
		MOV DX,0
		MOV BX,320			   
		DIV BX  		 ;AX--> 0-->3
		MOV ADDRESS_MODE2, AL
		;MOV AL,4
		;MOV COMMAND_FORMATION_STEPS,AL
		;CALL UPDATE_PLAYER_COMMAND_MASSEGE_LINE
		;-------
		    ;OPERAND2
          	MOV AH,ADDRESS_MODE2  	
			CMP AH,2
		    JG IMMEDIATE_LOOOP 	
			CMP AH,0
		    JE MODE1_VALUE_1
            JMP MODE1_REGESTER_1
		MODE1_VALUE_1: 
		    MOV AL,4
			MOV COMMAND_LIST,AL
			CALL UPDATE_COMMAND_LIST
            JMP END_MODE1_1
		MODE1_REGESTER_1:
		    MOV AL,3
			MOV COMMAND_LIST,AL
			CALL UPDATE_COMMAND_LIST
        END_MODE1_1:
		;-------------------------------------
        CALL GET_MOUSE_RIGHT_CLICK_POSITION;--------------------------------
        MOV AX,CX  	; the position for OP2 0-->F 
		MOV DX,0
		MOV BX,80			   
		DIV BX  		 ;AX--> 0-->F
		MOV OP2, AL
		;MOV AL,5
		;MOV COMMAND_FORMATION_STEPS,AL
		;CALL UPDATE_PLAYER_COMMAND_MASSEGE_LINE		
		MOV AL,0
		MOV COMMAND_LIST,AL
		CALL UPDATE_COMMAND_LIST
		JMP VERT_LIST_AFTER_EXCUTION_1
		;-------------------------------------
		IMMEDIATE_LOOOP:
		    MOV AL,4
			MOV COMMAND_LIST,AL
			CALL UPDATE_COMMAND_LIST
			MOV SI , OFFSET IMM_OP2
			MOV DI,0
	    AAAAGGGGAAAIIIN:
		CALL GET_MOUSE_RIGHT_CLICK_POSITION;--------------------------------
        MOV AX,CX  	; the position for IMM_OP2 0-->F 
		MOV DX,0
		MOV BX,80			   
		DIV BX  		 ;AX--> 0-->F
		ADD AL,30H       ;CONVERT TO CHAR
		MOV [SI],AL
		;MOV AL,5
		;MOV COMMAND_FORMATION_STEPS,AL
		;CALL UPDATE_PLAYER_COMMAND_MASSEGE_LINE			
        INC SI
		INC DI
		CMP DI,4
		JNE AAAAGGGGAAAIIIN	
		MOV AL,0
		MOV COMMAND_LIST,AL
		CALL UPDATE_COMMAND_LIST		
		;---------------------------------	
      	; WE NEED TO CHECK [SEND] & [CLEAR]		
        VERT_LIST_AFTER_EXCUTION_1:
		CALL UPDATE_PLAYER_COMMAND_MASSEGE_LINE
		CALL GET_MOUSE_RIGHT_CLICK_POSITION;--------------------------------
        MOV AX,DX  	; the position for SEND OR CLEAR
		MOV DX,0
		MOV BX,32			   
		DIV BX  		 ;AX--> 0-->C
		SUB AX ,1        ; as we already took 32 pixels for the horizontal line
		CMP AX ,0        ; IF [CLEAR]
		JNE NNNNNNNN		
        ;MOV AL,0
		;MOV COMMAND_FORMATION_STEPS,AL
		;CALL UPDATE_PLAYER_COMMAND_MASSEGE_LINE
		MOV AL,0
		MOV COMMAND_LIST,AL
		CALL UPDATE_COMMAND_LIST
		JMP START_COMMMANDING
		NNNNNNNN:
		CMP AX ,1        ; IF [SEND]
		JG VERT_LIST_AFTER_EXCUTION_1

        RET
		    ;CHANGE REGESTERS:"????"		  		  		  		  		  
	CREATE_COMMAND ENDP	

DRAW_GAME_SCREEN PROC NEAR
        ;GRAPHICS MODE INTIALIZATION
		MOV AL,12H ;640*480 PIXELES 80*30 CHARACTERS ; 80 COLOMN * 30 ROW FOR CURSER POSITION
		MOV AH,0
		INT 10H ;GRAPHIC MODE SCREEN
		;;//VERY IMPORTANT NOTE//;; >> TO PRINT CHARACTER IN GRAPHIC MODE CHOOSE COLOR & SET CURSER POSITION FINAALY USE INT 10H/AH=0EH
		;;//VERY IMPORTANT NOTE//;; >> THE CHARACTER DIMINTIONS IS 8*16 PIXELES
        ;----------------------------------------------------------------------
	     ;BEGIN OF THE GAME
        ;MOV AL,0
		;MOV COMMAND_FORMATION_STEPS,AL
		;CALL UPDATE_PLAYER_COMMAND_MASSEGE_LINE
		MOV AL,0
        MOV COMMAND_LIST,AL   		 
		CALL UPDATE_COMMAND_LIST
		MOV AL,0
		MOV PLAYER1_EXE, AL
		MOV EXC_POWER3_DONE, AL
		MOV EXC_POWER4_DONE, AL
		MOV EXC_POWER5_DONE, AL
		MOV I_WIN,AH
		MOV YOU_WIN,AH
		MOV AL,1
		MOV PLAYER2_EXE, AL		
        ;----------------------------------------------------------------------
		;YOU SHOULD CHOOSE LEVEL FIRST OR IT WILL BE LIKE LAST GAME  
		;GAME_LEVE :IF 1-> LEVEL1_ARRAY_POWERS_UP_NAME
		;			IF 2-> LEVEL2_ARRAY_POWERS_UP_NAME
		CALL UPDATE_POWERS_UP_LIST
        ;----------------------------------------------------------------------
		CALL UPDATE_CHAT_MASSEGE_LINES
        ;----------------------------------------------------------------------
		;YOU SHOULD INPUT YOUR NAME OR IT WILL BE LIKE LAST GAME  		
			MOV DI,OFFSET MAIN_GAME_NAME_SCORE_GOAL	
			;---------------------
			;CLEAR PLAYER_1 SCORE
			MOV AL,0
			MOV SI,OFFSET PLAYER_1_SCORE
		STILL_CLEARING_1:
			MOV AH,'0'
			MOV [SI],AH
            INC SI
			INC AL
			CMP AL,3
			JNE STILL_CLEARING_1
			;-------------------------			
			;CLEAR PLAYER_1 SCORE
			MOV AL,0
			MOV SI,OFFSET PLAYER_2_SCORE
		STILL_CLEARING_2:
			MOV AH,'0'
			MOV [SI],AH
            INC SI
			INC AL
			CMP AL,3
			JNE STILL_CLEARING_2
			;----------------------			
			;DEFUALT GOAL			
			MOV SI,OFFSET GAME_GOAL
			MOV AH,'1'
			MOV [SI],AH
			MOV AH,'0'
			MOV [SI+1],AH
			MOV AH,'5'
			MOV [SI+2],AH
			MOV AH,'E'
			MOV [SI+3],AH
			;----------------------	
		CALL UPDATE_HEADER_GOAL_LINE
        ;----------------------------------------------------------------------		
			MOV AH,0   
            MOV Memory_Location,AH
			;DEFUALT MEMORY VALUE			
			MOV SI,OFFSET Memory_Update
			MOV AH,'0'
			MOV [SI],AH
			MOV AH,'0'
			MOV [SI+1],AH
			MOV AL,0
		STILL_CLEARING_3:	
            INC Memory_Location
			INC AL
			CMP AL,16
			JNE STILL_CLEARING_3
		CALL UPDATE_PLAYER_1_MEMORY_LIST
		CALL UPDATE_PLAYER_2_MEMORY_LIST
        ;----------------------------------------------------------------------	
		;YOU SHOULD CHOOSE LEVEL FIRST OR IT WILL BE LIKE LAST GAME  
		;GAME_LEVE :IF 1-> CLEAR ALL REGESTERS FOR PLAYER1 & PLAYER2 & SHOW FORBIDDEN_CHARACTER
		;			IF 2-> YOU SHOULD READ INTIAL REGESTERS VALUE & NOT SHOW FORBIDDEN_CHARACTER
		MOV AH,1
		CMP GAME_LEVE,AH 
		JNE  INTIAL_GAME_LEVE_2
		CALL CLEAR_PLAYER_1_ALL_REGESTERS
		CALL CLEAR_PLAYER_2_ALL_REGESTERS
		CALL UPDATE_FORBIDDEN_KEY
	INTIAL_GAME_LEVE_2:	
		CALL UPDATE_PLAYERS_REGESTERS
        RET
		    ;CHANGE REGESTERS:"AX,BX,CX,DX,SI,DI"		  		  		  		  		  
	DRAW_GAME_SCREEN ENDP

;INPUT-->:
;SI -->SOURCE_FIRST_STRING
;DI -->DISTINATION_SECOND_STRING
;(INTEGER)COPY_SIZE (0-->FFFF) : IS NUMBER OF COPIES CHARACTER 
COPY_2_MASSAGE_FROM_SI_TO_DI PROC NEAR
	        MOV CX,0 
			REPET_COPY:
			MOV AH,[SI]
			MOV [DI],AH
			;----------
            INC CX 
			INC SI
			INC DI
			CMP CX,COPY_SIZE  
			JNE  REPET_COPY			 
	      RET
		  ;CHANGE REGESTERS:"AH,CX,SI,DI"
	   COPY_2_MASSAGE_FROM_SI_TO_DI ENDP

;INPUT-->:
;RECTANGLE_INTIAL_X (0-->640)				   -->START PIXEL POSITION
;RECTANGLE_INTIAL_Y (0-->480)				   -->START PIXEL POSITION
;RECTANGLE_FINAL_X  (RECTANGLE_INTIAL_X -->640)-->END   PIXEL POSITION
;RECTANGLE_FINAL_Y  (RECTANGLE_INTIAL_Y -->480)-->END   PIXEL POSITION
;RECTANGLE_COLOR (0-->F) --> IS PIXEL COLOR 	   
DROW_RECTANGLE PROC NEAR	         
             MOV CX,RECTANGLE_INTIAL_X ;X INITIAL POSITION
			 MOV DX,RECTANGLE_INTIAL_Y ;Y  INITIAL POSITION
			 ;----------			 
		DROW_RECTANGLE_HORIZONTAL:	        
	         MOV AH,0CH ; DRAW PIXEL
			 MOV AL,RECTANGLE_COLOR  ; PIXEL COLOR
			 MOV BH,00H ;PAGE NUMB.
			 INT 10H ; DRAW PIXEL
			 ;----------			 
			 INC CX
			 CMP CX,RECTANGLE_FINAL_X
			 JNE DROW_RECTANGLE_HORIZONTAL
			 ;---DROW_RECTANGLE_VERTICALLY
			 MOV CX,RECTANGLE_INTIAL_X ; BACK TO INITIAL			 
			 INC DX
			 CMP DX,RECTANGLE_FINAL_Y
			 JNE DROW_RECTANGLE_HORIZONTAL			 
	      RET
		  		  ;CHANGE REGESTERS:"AX,BH,CX,DX,DI"
	   DROW_RECTANGLE ENDP
	   
;INPUT-->:
;SI -->_STRING
;INTIAL_COL_CURSER (0-->80)				     -->START CURSER POSITION
;INTIAL_ROW_CURSER (0-->30)				     -->START CURSER POSITION
;RECTANGLE_FINAL_X  (INTIAL_COL_CURSER -->80)-->END   CURSER POSITION
;RECTANGLE_FINAL_Y  (INTIAL_ROW_CURSER -->30)-->END   CURSER POSITION
;CHARACTER_COLOR (0-->F) --> IS CHARACTER COLOR 
DISPLAY_STRING PROC NEAR	        			 
			 MOV DL,INTIAL_COL_CURSER ;Column
			 MOV DH,INTIAL_ROW_CURSER ;Row
             MOV BH,0 ;Display page
			 MOV BL,CHARACTER_COLOR ;+DEFUALT BLACK GROUND
			 ;----------			 
        DISPLAY_LOOP:
		     MOV AH,2 ;SetCursorPosition
			 INT 10H ;SetCursorPosition
			 ;----------			 
			 MOV AL,[SI];CHARACTER WHICH TO DISPLAY
			 CMP AL,' ' ;SPACE ;--> WILL NOT BE COLERD
			 JE NEXT_STEP
			 ;----------			 			
		     MOV AH,0EH ;Teletype
			 INT 10H ; PRINT CHARACTER
			 NEXT_STEP:
			 INC DL
			 INC SI
			 CMP DL,FINAL_COL_CURSER
			 JNE DISPLAY_LOOP
			 ;----------			 			
			 MOV DL,INTIAL_COL_CURSER ;RESET
			 INC DH
			 CMP DH,FINAL_ROW_CURSER
			 JNE DISPLAY_LOOP			
	      RET
		  	;CHANGE REGESTERS:"AX,BX,DX,SI"
	   DISPLAY_STRING ENDP
	   
;INPUT-->:
;INTEGR "COMMAND_LIST": IF 0-> ARRAY_INSTRUCTIONS_NAME 
                      ; IF 1-> OPERAND1_ARRAY_ADDRESS_MODE_NAME 
					  ; IF 2-> OPERAND2_ARRAY_ADDRESS_MODE_NAME
                      ; IF 3-> ARRAY_REGISTERS_NAME
                      ; IF 4-> ARRAY_VALUES_NAME
UPDATE_COMMAND_LIST PROC NEAR	         
			 ;CLEARING
			 MOV RECTANGLE_INTIAL_X ,0
			 MOV RECTANGLE_INTIAL_Y ,0
			 MOV RECTANGLE_COLOR ,0EH 
			 MOV RECTANGLE_FINAL_X ,640
			 MOV RECTANGLE_FINAL_Y,42
             CALL DROW_RECTANGLE
			;CLEARING
			MOV RECTANGLE_INTIAL_X ,6
			MOV RECTANGLE_INTIAL_Y ,15
			MOV RECTANGLE_COLOR ,0 
			MOV RECTANGLE_FINAL_X ,638
			MOV RECTANGLE_FINAL_Y,33
            CALL DROW_RECTANGLE			 
			 ;------------------------------------
			 ;COMMON CURSER POSITION
				;ARRAY_INSTRUCTIONS_NAME @ INTIAL CURSER POINT COLOMN= 0->79 & ROW=1		
				;OPERAND1_ARRAY_ADDRESS_MODE_NAME @ INTIAL CURSER POINT COLOMN= 0->79 & ROW=1
				;OPERAND1_ARRAY_ADDRESS_MODE_NAME @ INTIAL CURSER POINT COLOMN= 0->79 & ROW=1
				;ARRAY_REGISTERS_NAME @ INTIAL CURSER POINT COLOMN= 0->79 & ROW=1		
				;ARRAY_VALUES_NAME @ INTIAL CURSER POINT COLOMN= 0->79 & ROW=1
			 MOV INTIAL_COL_CURSER,0
			 MOV INTIAL_ROW_CURSER,1
			 MOV CHARACTER_COLOR ,2
			 MOV FINAL_COL_CURSER,80
			 MOV FINAL_ROW_CURSER,2				
			 ;------------------------------------
             ;CHOOSE WITCH DISPLAY			 
			 MOV AH,0
			 CMP COMMAND_LIST,AH
			 JE SHOW_INSTRUCTIONS
			 MOV AH,1
			 CMP COMMAND_LIST,AH
			 JE SHOW_OPERAND1_ADDRESS_MODE 
			 MOV AH,2
			 CMP COMMAND_LIST,AH
			 JE SHOW_OPERAND2_ADDRESS_MODE 
			 MOV AH,3
			 CMP COMMAND_LIST,AH
			 JE SHOW_REGESTERS
			 JMP SHOW_VALUES
		     ;------------------------------------
		SHOW_INSTRUCTIONS:
			 MOV SI,OFFSET ARRAY_INSTRUCTIONS_NAME 
			 CALL DISPLAY_STRING
			 JMP COMMAND_LIST_END
		SHOW_OPERAND1_ADDRESS_MODE:
			 MOV SI,OFFSET OPERAND1_ARRAY_ADDRESS_MODE_NAME 
			 CALL DISPLAY_STRING
             JMP COMMAND_LIST_END
		SHOW_OPERAND2_ADDRESS_MODE:
			 MOV SI,OFFSET OPERAND2_ARRAY_ADDRESS_MODE_NAME 
			 CALL DISPLAY_STRING
             JMP COMMAND_LIST_END
		SHOW_REGESTERS:
			 MOV SI,OFFSET ARRAY_REGISTERS_NAME 
			 CALL DISPLAY_STRING
             JMP COMMAND_LIST_END	
		SHOW_VALUES:
			 MOV SI,OFFSET ARRAY_VALUES_NAME 
			 CALL DISPLAY_STRING	 
		COMMAND_LIST_END:			 		 
	      RET
		  	;CHANGE REGESTERS:"AX,BX,CX,DX,SI,DI"		  
	   UPDATE_COMMAND_LIST ENDP

;INPUT-->:
;INTEGR "COMMAND_FORMATION_STEPS": IF 0-> EMTY COMMAND 
								 ; IF 1-> + INSTRUCTION 
								 ; IF 2-> + OPERAND1_ADDRESS_MODE
								 ; IF 3-> + OPERAND1
								 ; IF 4-> + OPERAND2_ADDRESS_MODE	 
								 ; IF 5-> + OPERAND2	
;INSTRUCT (0-->F) INSTRUCTION INDEX IN ARRAY_INSTRUCTIONS_NAME
;ADDRESS_MODE1 ;IF 0-->DIRECT MODE
               ;IF 1-->INDIRECT MODE
			   ;IF 2-->REGESTER MODE
;ADDRESS_MODE2 ;IF 0-->DIRECT MODE
               ;IF 1-->INDIRECT MODE
			   ;IF 2-->REGESTER MODE
			   ;IF 3-->IMMIDIATE MODE
;OP1 (0-->F) OP1 INDEX IN ARRAY_???
;OP2 (0-->F) OP2 INDEX IN ARRAY_???
;IMM_OP2  ('0000'-->'FFFF')	 IMMIDIATE VALUE  
UPDATE_PLAYER_COMMAND_MASSEGE_LINE PROC NEAR	         
			 ;CLEARING
			 MOV RECTANGLE_INTIAL_X ,70
			 MOV RECTANGLE_INTIAL_Y ,400
			 MOV RECTANGLE_COLOR ,0AH 
			 MOV RECTANGLE_FINAL_X ,280
			 MOV RECTANGLE_FINAL_Y,445
             CALL DROW_RECTANGLE
			  ;CLEARING
			 MOV RECTANGLE_INTIAL_X ,75
			 MOV RECTANGLE_INTIAL_Y ,416
			 MOV RECTANGLE_COLOR ,0 
			 MOV RECTANGLE_FINAL_X ,270
			 MOV RECTANGLE_FINAL_Y,432
             CALL DROW_RECTANGLE
		     ;------------------------------------
			 ;COMMON CURSER POSITION
			 ;PLAYER_1_COMMAND_MASSEGE @ INTIAL CURSER POINT COLOMN= 8->34 & ROW=26
			 MOV DI,OFFSET PLAYER_COMMAND_MASSEGE
		     MOV INTIAL_COL_CURSER,8
			 MOV INTIAL_ROW_CURSER,26
			 MOV CHARACTER_COLOR ,0FH
			 MOV FINAL_COL_CURSER,35
			 MOV FINAL_ROW_CURSER,27
			 ;------------------------------------
			 ;PRINT EMTY
			 MOV SI,OFFSET EMTY_COMMAND_MASSEGE
             MOV COPY_SIZE ,27
			 CALL COPY_2_MASSAGE_FROM_SI_TO_DI
			 ;MOV AH,0
			 ;CMP COMMAND_FORMATION_STEPS,AH
			 ;JNE N1 ; opposite conditional
             ;JMP END_COMMAND_SHOW ; unconditional jumps can have larger offsets
             ;;N1:
			 ;------------------------------------			 
             ;PRINT INSTRUCTION			 
			 MOV SI,OFFSET ARRAY_INSTRUCTIONS_NAME
			 MOV BL,5
			 MOV AL,INSTRUCT
			 MUL BL
			 ADD SI,AX
			 INC SI  
			 MOV AH,[SI]
			 MOV [DI+6],AH
			 MOV AH,[SI+1]
			 MOV [DI+7],AH
			 MOV AH,[SI+2]
			 MOV [DI+8],AH
			 ;;MOV AH,1
			 ;CMP COMMAND_FORMATION_STEPS,AH
			 ;JNE N2 ; opposite conditional
             ;JMP END_COMMAND_SHOW ; unconditional jumps can have larger offsets
             ;N2:
			 ;------------------------------------			
			;PRINT MODE1
			 MOV AH,ADDRESS_MODE1
			 CMP AH,2
			 JE END_PRACKET
			 MOV AH,'['
			 MOV [DI+10],AH
			 MOV AH,']'
			 MOV [DI+13],AH
		END_PRACKET:
			 ;MOV AH,2
			 ;CMP COMMAND_FORMATION_STEPS,AH
			 ;JNE N3 ; opposite conditional
             ;JMP END_COMMAND_SHOW ; unconditional jumps can have larger offsets
             ;N3:
			 ;------------------------------------		
             ;PRINT OPERAND1
          	 MOV AH,ADDRESS_MODE1
			 CMP AH,0
			 JE MODE1_VALUE
             JMP MODE1_REGESTER
		MODE1_VALUE: 
			 MOV SI,OFFSET ARRAY_VALUES_NAME
			 MOV BL,5
			 MOV AL,OP1
			 MUL BL
			 ADD SI,AX
			 ADD SI ,2		
			 MOV AH,'0'
			 MOV [DI+11],AH
			 MOV AH,[SI]
			 MOV [DI+12],AH
			 JMP END_MODE1
		MODE1_REGESTER:
		     MOV SI,OFFSET ARRAY_REGISTERS_NAME
			 MOV BL,5
			 MOV AL,OP1
			 MUL BL
			 ADD SI,AX
			 ADD SI ,1
			 MOV AH,[SI]
			 MOV [DI+11],AH
			 MOV AH,[SI+1]
			 MOV [DI+12],AH
        END_MODE1:
		     MOV AH,','
			 MOV [DI + 15],AH
			 ;------------
             ;MOV AH,3
			 ;CMP COMMAND_FORMATION_STEPS,AH
			 ;JNE N4 ; opposite conditional
             ;JMP ; ; unconditional jumps can have larger offsets
             ;N4:
			 ;------------------------------------			
			;PRINT MODE2
			 MOV AH,ADDRESS_MODE2
			 CMP AH,2
			 JGE END_PRACKET_2			 
			 MOV AH,'['
			 MOV [DI+17],AH
			 MOV AH,']'
			 MOV [DI+20],AH
		END_PRACKET_2:
			 ;MOV AH,4
			 ;JNE N5 ; opposite conditional
             ;JMP END_COMMAND_SHOW ; unconditional jumps can have larger offsets
             ;N5:
			 ;------------------------------------		
             ;PRINT OPERAND2
          	 MOV AH,ADDRESS_MODE2
			 CMP AH,0
			 JE MODE2_VALUE
			 CMP AH,3
			 JE MODE2_IMMIDIATE_VALUE
             JMP MODE2_REGESTER
		MODE2_VALUE: 
			 MOV SI,OFFSET ARRAY_VALUES_NAME
			 MOV BL,5
			 MOV AL,OP2
			 MUL BL
			 ADD SI,AX
			 ADD SI ,2		
			 MOV AH,'0'
			 MOV [DI+18],AH
			 MOV AH,[SI]
			 MOV [DI+19],AH
			 JMP END_MODE2
		MODE2_REGESTER:
		     MOV SI,OFFSET ARRAY_REGISTERS_NAME
			 MOV BL,5
			 MOV AL,OP2
			 MUL BL
			 ADD SI,AX
			 ADD SI ,1
			 MOV AH,[SI]
			 MOV [DI+18],AH
			 MOV AH,[SI+1]
			 MOV [DI+19],AH
			 JMP END_MODE2
		MODE2_IMMIDIATE_VALUE:
		     MOV SI,OFFSET IMM_OP2
		     MOV AH,[SI]
			 MOV [DI+17],AH
			 MOV AH,[SI+1]
			 MOV [DI+18],AH
			 MOV AH,[SI+2]
			 MOV [DI+19],AH
			 MOV AH,[SI+3]
			 MOV [DI+20],AH
			 MOV AH,'H'
			 MOV [DI + 21],AH			
        END_MODE2:	    
		END_COMMAND_SHOW:
			 MOV SI,OFFSET PLAYER_COMMAND_MASSEGE
			 CALL DISPLAY_STRING			 
	      RET
		  	;CHANGE REGESTERS:"AX,BX,CX,DX,SI,DI"		  
	   UPDATE_PLAYER_COMMAND_MASSEGE_LINE ENDP
 
 
EXCUTE_POWER_UP_1 PROC NEAR	
        MOV AL,1
		MOV PLAYER1_EXE, AL
		MOV AL,0
		MOV PLAYER2_EXE, AL
        RET
		    ;CHANGE REGESTERS:"AL"		  		  		  		  		  
	EXCUTE_POWER_UP_1 ENDP
EXCUTE_POWER_UP_2 PROC NEAR	
        MOV AL,1
		MOV PLAYER1_EXE, AL
		MOV PLAYER2_EXE, AL
        RET
		    ;CHANGE REGESTERS:"AL"		  		  		  		  		  
	EXCUTE_POWER_UP_2 ENDP	
EXCUTE_POWER_UP_3 PROC NEAR
        MOV AL,1
		CMP AL,EXC_POWER3_DONE
        JE FINISH_EXCUTE_POWER_UP_3		
        ;READ NEW FORBIDDEN CHARACTER
		MOV AH,0
		INT 16H ;WAIT ANTIL GET KEY PRESSED
		MOV AH,7
		INT 21H ;READ CHARACTER	
		;AL:--->ASCII
		MOV SEND_FORBIDDEN_CHARACTER,AL
		;CALL SEND_UPDATE_FORBIDDEN_KEY       ;----------------------------MISSING
	FINISH_EXCUTE_POWER_UP_3:	
        RET
		    ;CHANGE REGESTERS:"??"		  		  		  		  		  
	EXCUTE_POWER_UP_3 ENDP

EXCUTE_POWER_UP_4 PROC NEAR	
        MOV AL,1
		CMP AL,EXC_POWER4_DONE
        JE FINISH_EXCUTE_POWER_UP_4
        CALL CLEAR_PLAYER_1_ALL_REGESTERS
	FINISH_EXCUTE_POWER_UP_4:	
        RET
		    ;CHANGE REGESTERS:"??"		  		  		  		  		  
	EXCUTE_POWER_UP_4 ENDP
	
EXCUTE_POWER_UP_5 PROC NEAR
        MOV AL,1
		CMP AL,EXC_POWER5_DONE
        JE FINISH_EXCUTE_POWER_UP_5	
				    MOV AL,4
			MOV COMMAND_LIST,AL
			CALL UPDATE_COMMAND_LIST
			MOV SI , OFFSET GAME_GOAL
			MOV DI,0


	    AAGGAAIIN:
		CALL GET_MOUSE_RIGHT_CLICK_POSITION;--------------------------------
        MOV AX,CX  	; the position for GAME_GOAL 0-->F 
		MOV DX,0
		MOV BX,80			   
		DIV BX  		 ;AX--> 0-->F
		ADD AL,30H       ;CONVERT TO CHAR
		MOV [SI],AL		
        INC SI
		INC DI
		CMP DI,4
		JNE AAGGAAIIN	
		MOV AL,0
		MOV COMMAND_LIST,AL
		CALL UPDATE_COMMAND_LIST		
        CALL UPDATE_HEADER_GOAL_LINE
	FINISH_EXCUTE_POWER_UP_5:
		;MOV INTEGER_GAME_GOAL,GAME_GOAL        ///COVERT FROM ASCII TO INT
        RET
		    ;CHANGE REGESTERS:"??"		  		  		  		  		  
	EXCUTE_POWER_UP_5 ENDP	
	   
;INPUT-->:FORBIDDEN_CHARACTER	   
;(STRING) 	   
UPDATE_FORBIDDEN_KEY PROC NEAR
			 ;-----------------------------------------			 
			 ;UPDATE VALUE				 
			 MOV SI,OFFSET PLAYER_1_FORBIDDEN_CHARACTER	
			 MOV AH,FORBIDDEN_CHARACTER
			 MOV [SI+22],AH
			 ;-----------------------------------------	
             ;PLAYER_1_FORBIDDEN_CHARACTER @ INTIAL CURSER POINT COLOMN= 71->79 & ROW=23->26			 
		     MOV INTIAL_COL_CURSER,71
			 MOV INTIAL_ROW_CURSER,23
			 MOV CHARACTER_COLOR ,0FH
			 MOV FINAL_COL_CURSER,80
			 MOV FINAL_ROW_CURSER,27
			 MOV SI,OFFSET PLAYER_1_FORBIDDEN_CHARACTER 
			 CALL DISPLAY_STRING		 
	      RET
		     ;CHANGE REGESTERS:"?????"		  		  		  
	   UPDATE_FORBIDDEN_KEY ENDP

 
;INPUT-->:
;SI -->_STRING THAT YOU WANT TO SHOW IN && MUST BE IN SIZE 32 CHARACTER
UPDATE_MASSEGE PROC NEAR	 
             ;COPY NEW MASSEGE			 	
			 MOV DI,OFFSET MASSEGE
			 MOV COPY_SIZE ,32
			 CALL COPY_2_MASSAGE_FROM_SI_TO_DI
			 ;---------------------------------
             ;MASSEGE @ INTIAL CURSER POINT COLOMN= 40->71 & ROW=26	
			 MOV INTIAL_COL_CURSER,40
			 MOV INTIAL_ROW_CURSER,26
			 MOV CHARACTER_COLOR ,0EH
			 MOV FINAL_COL_CURSER,72
			 MOV FINAL_ROW_CURSER,27
			 MOV SI,OFFSET MASSEGE 
			 CALL DISPLAY_STRING
	      RET
		  	 ;CHANGE REGESTERS:"AX,BX,CX,DX,SI,DI"		  
	   UPDATE_MASSEGE ENDP
	   
;INPUT-->:
; PLAYER_1_NAME MUST BE 15 CHARACTER WITH SPACES
; PLAYER_2_NAME MUST BE 15 CHARACTER WITH SPACES  
; PLAYER_1_SCORE ('000'-->'999')
; PLAYER_2_SCORE ('000'-->'999')
; GOAL ('0000'--->'FFFF')
UPDATE_HEADER_GOAL_LINE PROC NEAR	         
			 ;CLEARING
			MOV RECTANGLE_INTIAL_X ,70
			MOV RECTANGLE_INTIAL_Y ,42
			MOV RECTANGLE_COLOR ,06H 
			MOV RECTANGLE_FINAL_X ,640
			MOV RECTANGLE_FINAL_Y,70
            CALL DROW_RECTANGLE
			;CLEARING
			MOV RECTANGLE_INTIAL_X ,73
			MOV RECTANGLE_INTIAL_Y ,47
			MOV RECTANGLE_COLOR ,0 
			MOV RECTANGLE_FINAL_X ,638
			MOV RECTANGLE_FINAL_Y,66
            CALL DROW_RECTANGLE
			;---------------------------------------------
			 ;FILL STRINGS	
             ;EXAMPLE_MAIN_GAME_NAME_SCORE_GOAL '  OMAR KHALED ALI : 0 0 0   GOAL:" 1 0 5 E "   OMAR KHALED ALI : 0 0 0  '
			;---------------------------------------------
			 ;PRINT NAME
			MOV SI,OFFSET PLAYER_1_NAME
			MOV DI,OFFSET MAIN_GAME_NAME_SCORE_GOAL[2]
			MOV COPY_SIZE ,15
			CALL COPY_2_MASSAGE_FROM_SI_TO_DI
			MOV SI,OFFSET PLAYER_2_NAME
			MOV DI,OFFSET MAIN_GAME_NAME_SCORE_GOAL[47]
			MOV COPY_SIZE ,15
			CALL COPY_2_MASSAGE_FROM_SI_TO_DI
			;---------------------------------------------
			MOV DI,OFFSET MAIN_GAME_NAME_SCORE_GOAL	
			;---------------------------------------------
			;PRINT SCORE
			MOV SI,OFFSET PLAYER_1_SCORE
			MOV AH,[SI]
			MOV [DI+20],AH
			MOV AH,[SI+1]
			MOV [DI+22],AH
			MOV AH,[SI+2]
			MOV [DI+24],AH
			;---------------------------------------------			
			MOV SI,OFFSET PLAYER_2_SCORE
			MOV AH,[SI]
			MOV [DI+65],AH
			MOV AH,[SI+1]
			MOV [DI+67],AH
			MOV AH,[SI+2]
			MOV [DI+69],AH
			;---------------------------------------------			
			;PRINT GOAL			
			MOV SI,OFFSET GAME_GOAL
			MOV AH,[SI]
			MOV [DI+35],AH
			MOV AH,[SI+1]
			MOV [DI+37],AH
			MOV AH,[SI+2]
			MOV [DI+39],AH
			MOV AH,[SI+3]
			MOV [DI+41],AH
			;---------------------------------------------			
			;MAIN_GAME_NAME_SCORE_GOAL @ INTIAL CURSER POINT COLOMN= 8->79 & ROW=3
		     MOV INTIAL_COL_CURSER,8
			 MOV INTIAL_ROW_CURSER,3
			 MOV CHARACTER_COLOR ,9
			 MOV FINAL_COL_CURSER,80
			 MOV FINAL_ROW_CURSER,4
			 MOV SI,OFFSET MAIN_GAME_NAME_SCORE_GOAL 
			 CALL DISPLAY_STRING
	      RET
		  	 ;CHANGE REGESTERS:"AX,BX,CX,DX,SI,DI"		  		  
	   UPDATE_HEADER_GOAL_LINE ENDP
									 
;INPUT-->: MUST BE IN STRING IN SIZE 27 CHARACTER
;PLAYER1_REGISTERS_AX_SI_VALUE	FROM '  0 0 0 0         0 0 0 0  ' TO  '  F F F F         F F F F  ' 
;PLAYER2_REGISTERS_AX_SI_VALUE	FROM '  0 0 0 0         0 0 0 0  ' TO  '  F F F F         F F F F  '  
;PLAYER1_REGISTERS_BX_DI_VALUE 	FROM '  0 0 0 0         0 0 0 0  ' TO  '  F F F F         F F F F  ' 
;PLAYER2_REGISTERS_BX_DI_VALUE	FROM '  0 0 0 0         0 0 0 0  ' TO  '  F F F F         F F F F  ' 
;PLAYER1_REGISTERS_CX_SP_VALUE 	FROM '  0 0 0 0         0 0 0 0  ' TO  '  F F F F         F F F F  ' 
;PLAYER2_REGISTERS_CX_SP_VALUE  FROM '  0 0 0 0         0 0 0 0  ' TO  '  F F F F         F F F F  ' 
;PLAYER1_REGISTERS_DX_BP_VALUE	FROM '  0 0 0 0         0 0 0 0  ' TO  '  F F F F         F F F F  ' 
;PLAYER2_REGISTERS_DX_BP_VALUE  FROM '  0 0 0 0         0 0 0 0  ' TO  '  F F F F         F F F F  ' 
UPDATE_PLAYERS_REGESTERS PROC NEAR
;PLAYER1_REGISTERS @ INTIAL CURSER POINT COLOMN= 8->34 + 44->70 & ROW=6->23	
             ;---------------------------------------------------- 
			 ;COMMON CURSER COLOR
			  MOV CHARACTER_COLOR ,0CH	
             ;----------------------PRINT PLAYER_1 REGESTERS------------------------------ 			             
			 ;COMMON CURSER POSITION
			 ;PLAYER1_REGISTERS  @ INTIAL CURSER POINT COLOMN= 8->34 
			 MOV INTIAL_COL_CURSER,8
			 MOV FINAL_COL_CURSER,35
			 ;----------------------------------------------------
;PLAYER1_REGISTERS_AX_SI @ INTIAL CURSER POINT   ROW=6
			 MOV INTIAL_ROW_CURSER,6
			 MOV FINAL_ROW_CURSER,7
			 MOV SI,OFFSET PLAYER_REGISTERS_AX_SI 
			 CALL DISPLAY_STRING
;PLAYER1_REGISTERS_AX_SI_VALUE @ INTIAL CURSER POINT  ROW=8
			 MOV INTIAL_ROW_CURSER,8
			 MOV FINAL_ROW_CURSER,9
			 MOV SI,OFFSET PLAYER1_REGISTERS_AX_SI_VALUE 
			 CALL DISPLAY_STRING
;PLAYER1_REGISTERS_BX_DI @ INTIAL CURSER POINT  ROW=11
			 MOV INTIAL_ROW_CURSER,11
			 MOV FINAL_ROW_CURSER,12
			 MOV SI,OFFSET PLAYER_REGISTERS_BX_DI 
			 CALL DISPLAY_STRING
;PLAYER1_REGISTERS_BX_DI_VALUE @ INTIAL CURSER POINT  ROW=13
			 MOV INTIAL_ROW_CURSER,13
			 MOV FINAL_ROW_CURSER,14
			 MOV SI,OFFSET PLAYER1_REGISTERS_BX_DI_VALUE 
			 CALL DISPLAY_STRING
;PLAYER1_REGISTERS_CX_SP @ INTIAL CURSER POINT  ROW=16
			 MOV INTIAL_ROW_CURSER,16
			 MOV FINAL_ROW_CURSER,17
			 MOV SI,OFFSET PLAYER_REGISTERS_CX_SP 
			 CALL DISPLAY_STRING
;PLAYER1_REGISTERS_CX_SP_VALUE @ INTIAL CURSER POINT  ROW=18
			 MOV INTIAL_ROW_CURSER,18
			 MOV FINAL_ROW_CURSER,19
			 MOV SI,OFFSET PLAYER1_REGISTERS_CX_SP_VALUE 
			 CALL DISPLAY_STRING
;PLAYER1_REGISTERS_DX_BP @ INTIAL CURSER POINT  ROW=21
			 MOV INTIAL_ROW_CURSER,21
			 MOV FINAL_ROW_CURSER,22
			 MOV SI,OFFSET PLAYER_REGISTERS_DX_BP 
			 CALL DISPLAY_STRING
;PLAYER1_REGISTERS_DX_BP_VALUE @ INTIAL CURSER POINT  ROW=23
			 MOV INTIAL_ROW_CURSER,23
			 MOV FINAL_ROW_CURSER,24
			 MOV SI,OFFSET PLAYER1_REGISTERS_DX_BP_VALUE 
			 CALL DISPLAY_STRING
			 ;------------------------------------------------------------
             ;----------------------PRINT PLAYER_2 REGESTERS------------------------------ 			             
			 ;COMMON CURSER POSITION
			 ;PLAYER1_REGISTERS  @ INTIAL CURSER POINT COLOMN= 44->70
			 MOV INTIAL_COL_CURSER,44
			 MOV FINAL_COL_CURSER,71
			 ;----------------------------------------------------
;PLAYER2_REGISTERS_AX_SI @ INTIAL CURSER POINT  ROW=6
			 MOV INTIAL_ROW_CURSER,6
			 MOV FINAL_ROW_CURSER,7
			 MOV SI,OFFSET PLAYER_REGISTERS_AX_SI 
			 CALL DISPLAY_STRING
;PLAYER2_REGISTERS_AX_SI_VALUE @ INTIAL CURSER POINT  ROW=8
			 MOV INTIAL_ROW_CURSER,8
			 MOV FINAL_ROW_CURSER,9
			 MOV SI,OFFSET PLAYER2_REGISTERS_AX_SI_VALUE 
			 CALL DISPLAY_STRING
			 ;------------------------------------------------------------------------------
;PLAYER2_REGISTERS_BX_DI @ INTIAL CURSER POINT  ROW=11
			 MOV INTIAL_ROW_CURSER,11
			 MOV FINAL_ROW_CURSER,12
			 MOV SI,OFFSET PLAYER_REGISTERS_BX_DI 
			 CALL DISPLAY_STRING
;PLAYER2_REGISTERS_BX_DI_VALUE @ INTIAL CURSER POINT  ROW=13
			 MOV INTIAL_ROW_CURSER,13
			 MOV FINAL_ROW_CURSER,14
			 MOV SI,OFFSET PLAYER2_REGISTERS_BX_DI_VALUE 
			 CALL DISPLAY_STRING
			 ;-------------------------------------------------------------------
;PLAYER2_REGISTERS_CX_SP @ INTIAL CURSER POINT  ROW=16
			 MOV INTIAL_ROW_CURSER,16
			 MOV FINAL_ROW_CURSER,17
			 MOV SI,OFFSET PLAYER_REGISTERS_CX_SP 
			 CALL DISPLAY_STRING
;PLAYER2_REGISTERS_CX_SP_VALUE @ INTIAL CURSER POINT  ROW=18
			 MOV INTIAL_ROW_CURSER,18
			 MOV FINAL_ROW_CURSER,19
			 MOV SI,OFFSET PLAYER2_REGISTERS_CX_SP_VALUE 
			 CALL DISPLAY_STRING
			 ;-----------------------------------------
;PLAYER2_REGISTERS_DX_BP @ INTIAL CURSER POINT  ROW=21
			 MOV INTIAL_ROW_CURSER,21
			 MOV FINAL_ROW_CURSER,22
			 MOV SI,OFFSET PLAYER_REGISTERS_DX_BP 
			 CALL DISPLAY_STRING
;PLAYER2_REGISTERS_DX_BP_VALUE @ INTIAL CURSER  ROW=23
			 MOV INTIAL_ROW_CURSER,23
			 MOV FINAL_ROW_CURSER,24
			 MOV SI,OFFSET PLAYER2_REGISTERS_DX_BP_VALUE 
			 CALL DISPLAY_STRING
			 ;-----------------------------------------
	      RET
		  	;CHANGE REGESTERS:"AX,BX,DX,SI"		  		  
	   UPDATE_PLAYERS_REGESTERS ENDP
	   
;INPUT-->:
;(INTEGR) Memory_Location (0-->F) INDEX OF CHOOSEN MEMORY	   
;(STRING) Memory_Update	  ('00;->'FF')  THE NEW VALUE WHICH WILL PUT IN THE CHOOSEN MEMORY LOCATION 	   
UPDATE_PLAYER_1_MEMORY_LIST PROC NEAR
			 ;CLEARING
			 MOV RECTANGLE_INTIAL_X ,280
			 MOV RECTANGLE_INTIAL_Y ,71
			 MOV RECTANGLE_COLOR ,0DH 
			 MOV RECTANGLE_FINAL_X ,352
			 MOV RECTANGLE_FINAL_Y,348
             CALL DROW_RECTANGLE
			 ;-----------------------------------------			 
			 ;UPDATE VALUE				 
			 MOV SI,OFFSET Memory_Update
			 MOV DI,OFFSET PLAYER_1_MEMORY_VALUES
			 MOV DL,Memory_Location
			 MOV AL,9
			 MUL DL ;=AX 
			 ;-----------------------------------------			 
			 ADD DI,AX			
			 MOV AH,[SI]
			 MOV [DI+1],AH
			 MOV AH,[SI+1]
			 MOV [DI+3],AH
			 ;-----------------------------------------	
	         ;PLAYER_1_MEMORY_VALUES @ INTIAL CURSER POINT COLOMN= 35->43 & ROW=5->20			 
		     MOV INTIAL_COL_CURSER,35
			 MOV INTIAL_ROW_CURSER,5
			 MOV CHARACTER_COLOR ,0EH
			 MOV FINAL_COL_CURSER,44
			 MOV FINAL_ROW_CURSER,21
			 MOV SI,OFFSET PLAYER_1_MEMORY_VALUES 
			 CALL DISPLAY_STRING		 
	      RET
		     ;CHANGE REGESTERS:"AX,BX,CX,DX,SI,DI"		  		  
	   UPDATE_PLAYER_1_MEMORY_LIST ENDP
	   
;INPUT-->:
;(INTEGR) Memory_Location (0-->F) INDEX OF CHOOSEN MEMORY	   
;(STRING) Memory_Update	  ('00;->'FF')  THE NEW VALUE WHICH WILL PUT IN THE CHOOSEN MEMORY LOCATION 	   
UPDATE_PLAYER_2_MEMORY_LIST PROC NEAR
			 ;CLEARING
			 MOV RECTANGLE_INTIAL_X ,566
			 MOV RECTANGLE_INTIAL_Y ,71
			 MOV RECTANGLE_COLOR ,0DH 
			 MOV RECTANGLE_FINAL_X ,639
			 MOV RECTANGLE_FINAL_Y,348
             CALL DROW_RECTANGLE
			 ;-----------------------------------------			 
			 ;UPDATE VALUE				 
			 MOV SI,OFFSET Memory_Update
			 MOV DI,OFFSET PLAYER_2_MEMORY_VALUES
			 MOV DL,Memory_Location
			 MOV AL,9
			 MUL DL ;=AX 
			 ;-----------------------------------------			 
			 ADD DI,AX			
			 MOV AH,[SI]
			 MOV [DI+1],AH
			 MOV AH,[SI+1]
			 MOV [DI+3],AH
			 ;-----------------------------------------	
             ;PLAYER_2_MEMORY_VALUES @ INTIAL CURSER POINT COLOMN= 71->79 & ROW=5->20			 
		     MOV INTIAL_COL_CURSER,71
			 MOV INTIAL_ROW_CURSER,5
			 MOV CHARACTER_COLOR ,0EH
			 MOV FINAL_COL_CURSER,80
			 MOV FINAL_ROW_CURSER,21
			 MOV SI,OFFSET PLAYER_2_MEMORY_VALUES 
			 CALL DISPLAY_STRING		 
	      RET
		     ;CHANGE REGESTERS:"AX,BX,CX,DX,SI,DI"		  		  		  
	   UPDATE_PLAYER_2_MEMORY_LIST ENDP
	   
;INPUT-->:
;(STRING) PLAYER_1_NAME    MUST BE 15 CHARACTER INCLUDE SPACES
;(STRING) PLAYER_2_NAME    MUST BE 15 CHARACTER INCLUDE SPACES 
;(STRING) PLAYER_1_MASSAGE MUST BE 62 CHARACTER INCLUDE SPACES	   
;(STRING) PLAYER_2_MASSAGE MUST BE 62 CHARACTER INCLUDE SPACES	   
UPDATE_CHAT_MASSEGE_LINES PROC NEAR	         
			 ;CLEARING
			 MOV RECTANGLE_INTIAL_X ,0
			 MOV RECTANGLE_INTIAL_Y ,445
			 MOV RECTANGLE_COLOR ,05H 
			 MOV RECTANGLE_FINAL_X ,640
			 MOV RECTANGLE_FINAL_Y,479
             CALL DROW_RECTANGLE
			 ;CLEARING
			MOV RECTANGLE_INTIAL_X ,6
			MOV RECTANGLE_INTIAL_Y ,447
			MOV RECTANGLE_COLOR ,0 
			MOV RECTANGLE_FINAL_X ,638
			MOV RECTANGLE_FINAL_Y,462
            CALL DROW_RECTANGLE		
			 ;CLEARING
			MOV RECTANGLE_INTIAL_X ,6
			MOV RECTANGLE_INTIAL_Y ,462
			MOV RECTANGLE_COLOR ,0 
			MOV RECTANGLE_FINAL_X ,638
			MOV RECTANGLE_FINAL_Y,477
            CALL DROW_RECTANGLE					
			 ;----------------------------------------------
             ;CLEER_2PLAYERS_MASSEGE			 
			 MOV SI,OFFSET PLAYER_DEFAULT_CHAT_MASSEGE	
			 MOV DI,OFFSET PLAYER_1_CHAT_MASSEGE
			 MOV COPY_SIZE ,80
			 CALL COPY_2_MASSAGE_FROM_SI_TO_DI
			 ;----------------------------------------------			
		 	 MOV SI,OFFSET PLAYER_DEFAULT_CHAT_MASSEGE
			 MOV DI,OFFSET PLAYER_2_CHAT_MASSEGE
			 MOV COPY_SIZE ,80
			 CALL COPY_2_MASSAGE_FROM_SI_TO_DI
			 ;----------------------------------------------
			 ;FILL STRINGS	
			 ;----------------------------------------------
		;PRINT NAME
 			 MOV SI,OFFSET PLAYER_1_NAME
			 MOV DI,OFFSET PLAYER_1_CHAT_MASSEGE[1]
			 MOV COPY_SIZE ,15
			 CALL COPY_2_MASSAGE_FROM_SI_TO_DI
			 ;----------------------------------------------
			 MOV SI,OFFSET PLAYER_2_NAME
			 MOV DI,OFFSET PLAYER_2_CHAT_MASSEGE[1]
			 MOV COPY_SIZE ,15
			 CALL COPY_2_MASSAGE_FROM_SI_TO_DI
			 ;----------------------------------------------
		;PRINT CHAT
			 MOV SI,OFFSET PLAYER_1_MASSAGE
			 MOV DI,OFFSET PLAYER_1_CHAT_MASSEGE[18]
			 MOV COPY_SIZE ,62
			 CALL COPY_2_MASSAGE_FROM_SI_TO_DI
			 ;----------------------------------------------
			 MOV SI,OFFSET PLAYER_2_MASSAGE
			 MOV DI,OFFSET PLAYER_2_CHAT_MASSEGE[18]
			 MOV COPY_SIZE ,62
			 CALL COPY_2_MASSAGE_FROM_SI_TO_DI
			 ;----------------------------------------------
			 			 ;COMMON CURSER POSITION
			 ;PLAYER_1&2_CHAT_MASSEGE  @ INTIAL CURSER POINT COLOMN= 0->79 
			 MOV INTIAL_COL_CURSER,0
			 MOV FINAL_COL_CURSER,80
			 MOV CHARACTER_COLOR ,2
			 ;----------------------------------------------------
			;PLAYER_1_CHAT_MASSEGE @ INTIAL CURSER POINT ROW=28
			 MOV INTIAL_ROW_CURSER,28
			 MOV FINAL_ROW_CURSER,29
			 MOV SI,OFFSET PLAYER_1_CHAT_MASSEGE 
			 CALL DISPLAY_STRING
			 ;----------------------------------------------------			 
			 ;PLAYER_2_CHAT_MASSEGE @ INTIAL CURSER POINT ROW=29
			 MOV INTIAL_ROW_CURSER,29
			 MOV FINAL_ROW_CURSER,30
			 MOV SI,OFFSET PLAYER_2_CHAT_MASSEGE 
			 CALL DISPLAY_STRING
	      RET
		     ;CHANGE REGESTERS:"AX,BX,CX,DX,SI,DI"		  		  		  		  
	   UPDATE_CHAT_MASSEGE_LINES ENDP
	
;INPUT-->:
;(INTEGR) GAME_LEVE       IF 1-> LEVEL1_ARRAY_POWERS_UP_NAME	   
;                         IF 2-> LEVEL2_ARRAY_POWERS_UP_NAME
UPDATE_POWERS_UP_LIST PROC NEAR	         
			 ;CLEARING
			 MOV RECTANGLE_INTIAL_X ,0
			 MOV RECTANGLE_INTIAL_Y ,42
			 MOV RECTANGLE_COLOR ,2 
			 MOV RECTANGLE_FINAL_X ,70
			 MOV RECTANGLE_FINAL_Y,452
             CALL DROW_RECTANGLE
			 ;----------------------------------------------
			 			 ;COMMON CURSER POSITION
		    ;LEVEL_1&2_ARRAY_POWERS_UP_NAME @ INTIAL CURSER POINT COLOMN= 0->7 & ROW=3->27			 
             MOV INTIAL_COL_CURSER,0
			 MOV INTIAL_ROW_CURSER,3
			 MOV CHARACTER_COLOR ,0DH
			 MOV FINAL_COL_CURSER,8
			 MOV FINAL_ROW_CURSER,28		 
			 ;---------------------------------------
			 ;CHOOSE WITCH DISPLAY			 
			 MOV AH,1
			 CMP GAME_LEVE,AH
			 JE IT_IS_LEVEL_1
			 JMP IT_IS_LEVEL_2
			 ;---------------------------------------
		IT_IS_LEVEL_1:
			 MOV SI,OFFSET LEVEL1_ARRAY_POWERS_UP_NAME 
			 CALL DISPLAY_STRING
			 JMP POWERS_UP_LIST_END
			 ;---------------------------------------			 
		IT_IS_LEVEL_2:	 		 
			 MOV SI,OFFSET LEVEL2_ARRAY_POWERS_UP_NAME 
			 CALL DISPLAY_STRING			 
		POWERS_UP_LIST_END:	 
	      RET
		    ;CHANGE REGESTERS:"AX,BX,CX,DX,SI,DI"		  		  		  		  		  
	   UPDATE_POWERS_UP_LIST ENDP

CLEAR_PLAYER_1_ALL_REGESTERS PROC NEAR	
        MOV AH,'0'
		;-----------------------------------------
		;CLEAR 
		MOV SI,OFFSET PLAYER1_REGISTERS_AX_SI_VALUE
		MOV [SI+2],AH
		MOV [SI+4],AH
		MOV [SI+6],AH
		MOV [SI+8],AH
		MOV [SI+18],AH
		MOV [SI+20],AH
		MOV [SI+22],AH
		MOV [SI+24],AH
		;-----------------------------------------
		;CLEAR 
		MOV SI,OFFSET PLAYER1_REGISTERS_BX_DI_VALUE
		MOV [SI+2],AH
		MOV [SI+4],AH
		MOV [SI+6],AH
		MOV [SI+8],AH
		MOV [SI+18],AH
		MOV [SI+20],AH
		MOV [SI+22],AH
		MOV [SI+24],AH
		;-----------------------------------------
		;CLEAR 
		MOV SI,OFFSET PLAYER1_REGISTERS_CX_SP_VALUE
		MOV [SI+2],AH
		MOV [SI+4],AH
		MOV [SI+6],AH
		MOV [SI+8],AH
		MOV [SI+18],AH
		MOV [SI+20],AH
		MOV [SI+22],AH
		MOV [SI+24],AH
		;-----------------------------------------
		;CLEAR 
		MOV SI,OFFSET PLAYER1_REGISTERS_DX_BP_VALUE
		MOV [SI+2],AH
		MOV [SI+4],AH
		MOV [SI+6],AH
		MOV [SI+8],AH
		MOV [SI+18],AH
		MOV [SI+20],AH
		MOV [SI+22],AH
		MOV [SI+24],AH	
        RET
		    ;CHANGE REGESTERS:"AH,SI"		  		  		  		  		  
	CLEAR_PLAYER_1_ALL_REGESTERS ENDP
	
CLEAR_PLAYER_2_ALL_REGESTERS PROC NEAR	
        MOV AH,'0'
		;-----------------------------------------
		;CLEAR 
		MOV SI,OFFSET PLAYER2_REGISTERS_AX_SI_VALUE
		MOV [SI+2],AH
		MOV [SI+4],AH
		MOV [SI+6],AH
		MOV [SI+8],AH
		MOV [SI+18],AH
		MOV [SI+20],AH
		MOV [SI+22],AH
		MOV [SI+24],AH
		;-----------------------------------------
		;CLEAR 
		MOV SI,OFFSET PLAYER2_REGISTERS_BX_DI_VALUE
		MOV [SI+2],AH
		MOV [SI+4],AH
		MOV [SI+6],AH
		MOV [SI+8],AH
		MOV [SI+18],AH
		MOV [SI+20],AH
		MOV [SI+22],AH
		MOV [SI+24],AH
		;-----------------------------------------
		;CLEAR 
		MOV SI,OFFSET PLAYER2_REGISTERS_CX_SP_VALUE
		MOV [SI+2],AH
		MOV [SI+4],AH
		MOV [SI+6],AH
		MOV [SI+8],AH
		MOV [SI+18],AH
		MOV [SI+20],AH
		MOV [SI+22],AH
		MOV [SI+24],AH
		;-----------------------------------------
		;CLEAR 
		MOV SI,OFFSET PLAYER2_REGISTERS_DX_BP_VALUE
		MOV [SI+2],AH
		MOV [SI+4],AH
		MOV [SI+6],AH
		MOV [SI+8],AH
		MOV [SI+18],AH
		MOV [SI+20],AH
		MOV [SI+22],AH
		MOV [SI+24],AH	
        RET
		    ;CHANGE REGESTERS:"AH,SI"		  		  		  		  		  
	CLEAR_PLAYER_2_ALL_REGESTERS ENDP		   
	 
GET_CHAT PROC NEAR
        MOV SI, OFFSET PLAYER_1_MASSAGE
		MOV DI,0
			 MOV DL,18 ;Column
			 MOV DH,28 ;Row
             MOV BH,0 ;Display page
			 MOV BL,0FH ;+DEFUALT BLACK GROUND
		     MOV AH,2 ;SetCursorPosition
			 INT 10H ;SetCursorPosition
        ;READ CHARACTER
	AGAGAG:	
		;MOV AH,0
		;INT 16H ;WAIT ANTIL GET KEY PRESSED
		
		MOV AH,1
		INT 21H ;READ CHARACTER	
		;AL:--->ASCII
		CMP AL,13 ;ENTER
		JE FINISH_GET_CHAT
		MOV [SI],AL
		INC SI 
		INC DI 
		CMP DI,61
		JNE AGAGAG
		FINISH_GET_CHAT:
		CALL UPDATE_CHAT_MASSEGE_LINES
   RET
	 GET_CHAT ENDP

SENDING PROC NEAR
     CALL INTIAL_PORT	  
	 MOV AL,I_WIN
	 MOV VALUE,AL
	 CALL SEND_PORT
	 MOV AL,YOU_WIN
	 MOV VALUE,AL
	 CALL SEND_PORT	 
	 MOV SI,OFFSET PLAYER_1_SCORE
	 MOV AL,3
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING
	 MOV SI,OFFSET GAME_GOAL
	 MOV AL,4
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING
	 MOV SI,OFFSET SEND_FORBIDDEN_CHARACTER
	 MOV AL,1
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING
	 MOV SI,OFFSET PLAYER_1_MASSAGE
	 MOV AL,62
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING
	 MOV SI,OFFSET PLAYER_1_MEMORY_VALUES
	 MOV AL,144
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING
	 MOV SI,OFFSET PLAYER_2_MEMORY_VALUES
	 MOV AL,144
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING	
	 MOV SI,OFFSET PLAYER1_REGISTERS_AX_SI_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING	
	 MOV SI,OFFSET PLAYER1_REGISTERS_BX_DI_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING	
	 MOV SI,OFFSET PLAYER1_REGISTERS_CX_SP_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING	
	 MOV SI,OFFSET PLAYER1_REGISTERS_DX_BP_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING	
	 MOV SI,OFFSET PLAYER2_REGISTERS_AX_SI_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING	
	 MOV SI,OFFSET PLAYER2_REGISTERS_BX_DI_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING	
	 MOV SI,OFFSET PLAYER2_REGISTERS_CX_SP_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING	
	 MOV SI,OFFSET PLAYER2_REGISTERS_DX_BP_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL COPY_SENDING		 
	SENDING ENDP
;INPUT: SEND_SIZE
;MOV SI,OFFSET ......	
COPY_SENDING PROC NEAR
	 MOV DI,0
STILL_COPY:
	 MOV AL,[SI]
	 MOV VALUE,AL
	 CALL SEND_PORT
	 INC SI 
	 INC DI 
	 CMP DI,SEND_SIZE
	 JNE STILL_COPY 
	COPY_SENDING ENDP
;INPUT: SEND_SIZE
;MOV SI,OFFSET ......		
PASTE_RECIEVEING PROC NEAR
	 MOV DI,0
STILL_PASTE:
     CALL RECIEVE_PORT
	 MOV AL,VALUE
	 MOV [SI],AL
	 INC SI 
	 INC DI 
	 CMP DI,SEND_SIZE
	 JNE STILL_PASTE 
	PASTE_RECIEVEING ENDP	
	
RECIEVEING PROC NEAR
     CALL INTIAL_PORT
     CALL RECIEVE_PORT	 
	 MOV AL,VALUE
	 MOV YOU_WIN,AL
	 
     CALL RECIEVE_PORT	 
	 MOV AL,VALUE
	 MOV I_WIN,AL

	 MOV SI,OFFSET PLAYER_2_SCORE
	 MOV AL,3
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	 MOV SI,OFFSET GAME_GOAL
	 MOV AL,4
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	 MOV SI,OFFSET FORBIDDEN_CHARACTER
	 MOV AL,1
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	 MOV SI,OFFSET PLAYER_2_MASSAGE
	 MOV AL,62
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	 MOV SI,OFFSET PLAYER_2_MEMORY_VALUES
	 MOV AL,144
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	 MOV SI,OFFSET PLAYER_1_MEMORY_VALUES
	 MOV AL,144
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	 MOV SI,OFFSET PLAYER2_REGISTERS_AX_SI_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	 MOV SI,OFFSET PLAYER2_REGISTERS_BX_DI_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	 MOV SI,OFFSET PLAYER2_REGISTERS_CX_SP_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	 MOV SI,OFFSET PLAYER2_REGISTERS_DX_BP_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	 MOV SI,OFFSET PLAYER1_REGISTERS_AX_SI_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING	
	 
	 MOV SI,OFFSET PLAYER1_REGISTERS_BX_DI_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	 MOV SI,OFFSET PLAYER1_REGISTERS_CX_SP_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	 MOV SI,OFFSET PLAYER1_REGISTERS_DX_BP_VALUE
	 MOV AL,27
	 MOV SEND_SIZE,AL
	 CALL PASTE_RECIEVEING
	 
	RECIEVEING ENDP
	
INTIAL_PORT proc
    Mov dx,3fbh
    mov al,10000000b
    out dx,al

    mov dx,3f8h
    mov al,0ch
    out dx,al

    mov dx,3f9h
    mov al,00H
    out dx,al

    mov dx,3fbh
    mov al,00011011b
    out dx,al

    ret

INTIAL_PORT ENDP

SEND_PORT proc 

    mov dx,3fdh
    again7: in al,dx
    and al,00100000b
    jz again7
    mov dx,3f8h
    mov al,VALUE
    out dx,al
    ret

SEND_PORT ENDP

RECIEVE_PORT proc 

    mov dx,3fdh
    check7: in al,dx
    and al,1
    jz check7
    mov dx,03f8h
    in al,dx
    mov VALUE,al

    ret

RECIEVE_PORT ENDP	

;INPUT ---> 
CHECK_GOAL PROC NEAR
	 CMP BX,INTEGER_GAME_GOAL
	 JNE FIIIINE
	 MOV AH,1
	 MOV I_WIN,AH
FIIIINE:	 
	CHECK_GOAL ENDP
	
;
CHECK_SCORE PROC NEAR
     MOV BX,INTEGER_PLAYER_1_SCORE
	 CMP BX,0
	 JG FIIIIIINE
	 MOV AH,1
	 MOV YOU_WIN,AH
FIIIIIINE:	 
	CHECK_SCORE ENDP	 
	   END MAIN
